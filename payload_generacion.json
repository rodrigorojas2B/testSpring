{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nnombre: Obtener empleados nacidos antes del año 2000\ncomo: Administrador del sistema\nquiero: Obtener una lista de empleados que hayan nacido antes del año 2000\npara: Poder segmentar a los empleados por  generaciones y aplicar políticas diferenciadas\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Package | Clasificación | Motivo |\n|------------|---------|----------------|--------|\n| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `birthDate` necesario para la nueva funcionalidad |\n| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se puede extender para agregar la nueva funcionalidad |\n| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | No necesita modificaciones para la nueva funcionalidad |\n| EmployeeController | test.core.api.controller | MODIFICABLE | Se necesita agregar un nuevo endpoint para la nueva funcionalidad |\n| EmployeeService | test.core.api.service | MODIFICABLE | Se necesita agregar un nuevo método para la nueva funcionalidad |\n| EmployeeServiceImpl | test.core.api.service.impl | MODIFICABLE | Se necesita implementar el nuevo método para la nueva funcionalidad |\n\n--- PLAN DE MODIFICACIÓN ---\n\n1. Clase `EmployeeRepository`: Agregar un nuevo método `List<Employee> findByBirthDateBefore(LocalDate date);` para obtener los empleados nacidos antes de una fecha específica.\n\n2. Clase `EmployeeService`: Agregar un nuevo método `List<Employee> getEmployeesBornBeforeYear(int year);` para obtener los empleados nacidos antes de un año específico.\n\n3. Clase `EmployeeServiceImpl`: Implementar el nuevo método `getEmployeesBornBeforeYear(int year)`. Este método debe convertir el año en una fecha (1 de enero del año especificado) y luego llamar al método `findByBirthDateBefore(LocalDate date)` del repositorio.\n\n4. Clase `EmployeeController`: Agregar un nuevo endpoint `@GetMapping(\"/born-before/{year}\")` que llame al método `getEmployeesBornBeforeYear(int year)` del servicio.\n\n5. Crear pruebas unitarias para los nuevos métodos en `EmployeeServiceImpl` y `EmployeeController`.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.\n- No elimines implementaciones de interfaces ya declaradas.\n- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera\n\n"
    }
  ],
  "temperature": 0.3
}
