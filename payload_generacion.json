{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Solo puedes modificar clases que aparecen en el repositorio. Cuando modifiques una clase, debes conservar todo su contenido original tal como aparece en el repositorio, incluyendo todos los métodos existentes, incluso si no se modifican. No omitas partes del código ni las resumas con comentarios como '// Other methods...'. Extrae y conserva el package exacto de la clase original; nunca inventes un package nuevo como 'com.example.demo'. Si una clase es nueva, debe estar explícitamente marcada como NUEVA en el análisis. Cada clase debe comenzar con 'package ...' y no debe incluir texto adicional antes o después del bloque de código. El resultado debe ser completamente compilable."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nid: HDU-EMP-003\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: >\n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de  no eliminar registros históricos sensibles.\n\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Clasificación | Motivo |\n|------------|----------------|--------|\n| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` que se necesita para la validación |\n| EmployeeRepository | REUTILIZABLE-AS-IS | Se utiliza para realizar operaciones CRUD en la base de datos |\n| EmployeeService | REUTILIZABLE-AS-IS | Interfaz que define los métodos del servicio |\n| EmployeeServiceImpl | MODIFICABLE | Necesita agregar validación antes de eliminar un empleado |\n| EmployeeController | REUTILIZABLE-AS-IS | Controlador que maneja las solicitudes HTTP |\n| EmployeeCoreApiApplication | REUTILIZABLE-AS-IS | Clase principal de la aplicación |\n| CannotDeleteEmployeeException | NUEVA | Excepción personalizada para manejar el intento de eliminación de empleados femeninos |\n\n--- INSTRUCCIONES DE MODIFICACIÓN ---\n\n1. Clase `EmployeeServiceImpl`: Modificar el método `deleteEmployeeById(Long id)` para agregar una validación que verifique el género del empleado antes de proceder con la eliminación. Si el género es \"Femenino\", se debe lanzar la excepción `CannotDeleteEmployeeException`.\n\n2. Clase `CannotDeleteEmployeeException`: Crear esta nueva clase que extiende de `RuntimeException`. Esta excepción se lanzará cuando se intente eliminar un empleado de género femenino.\n\n--- CÓDIGO A GENERAR ---\n\n1. Clase `EmployeeServiceImpl`:\n\n```java\npackage test.core.api.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.exception.CannotDeleteEmployeeException;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.service.EmployeeService;\n\n@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    @Override\n    public void deleteEmployeeById(Long id) {\n        // Start of AI modification\n        Employee employee = employeeRepository.findById(id).orElse(null);\n        if (employee != null && \"Femenino\".equals(employee.getGender())) {\n            throw new CannotDeleteEmployeeException(\"Cannot delete female employee with id: \" + id);\n        }\n        // End of AI modification\n        employeeRepository.deleteById(id);\n    }\n\n    // Other existing methods...\n}\n```\n\n2. Clase `CannotDeleteEmployeeException`:\n\n```java\npackage test.core.api.exception;\n\npublic class CannotDeleteEmployeeException extends RuntimeException {\n    public CannotDeleteEmployeeException(String message) {\n        super(message);\n    }\n}\n```\n\n3. Test Unitario para `EmployeeServiceImpl`:\n\n```java\npackage test.core.api.service.impl;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport test.core.api.exception.CannotDeleteEmployeeException;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\n\nimport java.util.Optional;\n\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n@ExtendWith(MockitoExtension.class)\npublic class EmployeeServiceImplTest {\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @InjectMocks\n    private EmployeeServiceImpl employeeService;\n\n    @Test\n    public void deleteEmployeeById_FemaleEmployee_ThrowsException() {\n        Employee employee = new Employee();\n        employee.setGender(\"Femenino\");\n        when(employeeRepository.findById(1L)).thenReturn(Optional.of(employee));\n\n        assertThrows(CannotDeleteEmployeeException.class, () -> {\n            employeeService.deleteEmployeeById(1L);\n        });\n    }\n}\n```\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n\n"
    }
  ],
  "temperature": 0.3
}
