{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java experto en Spring Boot. Tu salida debe contener únicamente código fuente Java completamente válido. Cada clase debe comenzar con 'package ...' y contener la declaración completa de la clase (public class, interface o enum). No debes escribir ningún texto explicativo, encabezado, numeración, ni comentarios como '1.', '2.', 'Test Unitario:', etc. Si la clase ya existe en el repositorio, debes conservar su package original y todos sus métodos, incluso si no se modifican. No puedes inventar nuevos packages como 'com.example.demo'. Si una clase es nueva, debe estar marcada como NUEVA en el análisis previo. No escribas ningún contenido fuera de los bloques de código. El resultado debe ser compilable sin errores ni contenido basura."
    },
    {
      "role": "user",
      "content": "--- HISTORIA DE USUARIO ---\nid: HDU-EMP-003\ntitulo: Prevenir eliminación de empleadas\nactor: Administrador del sistema\ndescripcion: >\n  Como administrador del sistema,\n  quiero que no se permita eliminar empleados de género femenino,\n  para cumplir con la normativa interna de no eliminar registros históricos sensibles.\n\ncriterios_aceptacion:\n  - Si se intenta eliminar un empleado con género \"Femenino\", se debe lanzar una excepción o retornar un error controlado.\n  - Si el empleado es de género \"Masculino\" u otro valor, se permite la eliminación normal.\n  - El método de eliminación actual debe ser modificado para incluir esta validación.\n  - No debe eliminarse ninguna lógica existente que ya esté implementada en ese método.\n  - Se deben mantener todos los métodos actuales sin eliminación ni reemplazo.\n  - La modificación debe estar delimitada por comentarios que indiquen claramente el inicio y fin del cambio realizado por la IA.\n\n\n--- DIAGNÓSTICO Y PLAN DE CLASES ---\n--- ANÁLISIS DE CLASES EXISTENTES ---\n\n| Clase Java | Clasificación | Motivo |\n|------------|----------------|--------|\n| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` necesario para la validación |\n| EmployeeRepository | REUTILIZABLE-AS-IS | Se utiliza para acceder a los datos de los empleados |\n| EmployeeService | REUTILIZABLE-AS-IS | Interfaz que define los métodos del servicio de empleados |\n| EmployeeServiceImpl | MODIFICABLE | Necesita incluir la validación antes de eliminar un empleado |\n| EmployeeController | REUTILIZABLE-AS-IS | Controlador que utiliza el servicio de empleados |\n| EmployeeCoreApiApplication | REUTILIZABLE-AS-IS | Clase principal de la aplicación |\n| CannotDeleteEmployeeException | NUEVA | Excepción personalizada para manejar el intento de eliminar un empleado femenino |\n\n--- PLAN DE MODIFICACIÓN ---\n\n1. Clase `EmployeeServiceImpl`: Modificar el método `deleteEmployeeById(Long id)` para incluir una validación antes de eliminar un empleado. Si el empleado es de género femenino, se debe lanzar una excepción `CannotDeleteEmployeeException`.\n\n2. Clase `CannotDeleteEmployeeException`: Crear una nueva clase de excepción personalizada que se lanzará cuando se intente eliminar un empleado femenino. Esta clase heredará de `RuntimeException` y tomará un mensaje personalizado en su constructor.\n\nNo se requiere ninguna modificación en las demás clases existentes.\n\n--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---\n- Modifica únicamente las clases marcadas como MODIFICABLE.\n- Crea nuevas clases solo si están indicadas como NUEVA.\n- No cambies de paquete ni nombre de clase.\n- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.\n- No omitas lógica existente.\n- Cada clase debe comenzar con `package ...`.\n- Devuelve únicamente clases y tests JUnit 5 válidos.\n- No incluyas explicaciones ni comentarios adicionales.\n\n"
    }
  ],
  "temperature": 0.3
}
