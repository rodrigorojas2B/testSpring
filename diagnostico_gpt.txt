--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `birthDate` necesario para la nueva funcionalidad |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se puede extender para agregar la nueva funcionalidad |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | No necesita modificaciones para la nueva funcionalidad |
| EmployeeController | test.core.api.controller | MODIFICABLE | Se necesita agregar un nuevo endpoint para la nueva funcionalidad |
| EmployeeService | test.core.api.service | MODIFICABLE | Se necesita agregar un nuevo método para la nueva funcionalidad |
| EmployeeServiceImpl | test.core.api.service.impl | MODIFICABLE | Se necesita implementar el nuevo método para la nueva funcionalidad |

--- PLAN DE MODIFICACIÓN ---

1. Clase `EmployeeRepository`: Agregar un nuevo método `List<Employee> findByBirthDateBefore(LocalDate date);` para obtener los empleados nacidos antes de una fecha específica.

2. Clase `EmployeeService`: Agregar un nuevo método `List<Employee> getEmployeesBornBeforeYear(int year);` para obtener los empleados nacidos antes de un año específico.

3. Clase `EmployeeServiceImpl`: Implementar el nuevo método `getEmployeesBornBeforeYear(int year)`. Este método debe convertir el año en una fecha (1 de enero del año especificado) y luego llamar al método `findByBirthDateBefore(LocalDate date)` del repositorio.

4. Clase `EmployeeController`: Agregar un nuevo endpoint `@GetMapping("/born-before/{year}")` que llame al método `getEmployeesBornBeforeYear(int year)` del servicio.

5. Crear pruebas unitarias para los nuevos métodos en `EmployeeServiceImpl` y `EmployeeController`.
