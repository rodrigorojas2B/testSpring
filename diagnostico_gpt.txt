--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Clasificación | Motivo |
|------------|----------------|--------|
| Employee | REUTILIZABLE-AS-IS | Contiene atributo `gender` que se necesita para la validación |
| EmployeeRepository | REUTILIZABLE-AS-IS | Se utiliza para realizar operaciones CRUD en la base de datos |
| EmployeeService | REUTILIZABLE-AS-IS | Interfaz que define los métodos del servicio |
| EmployeeServiceImpl | MODIFICABLE | Necesita agregar validación antes de eliminar un empleado |
| EmployeeController | REUTILIZABLE-AS-IS | Controlador que maneja las solicitudes HTTP |
| EmployeeCoreApiApplication | REUTILIZABLE-AS-IS | Clase principal de la aplicación |
| CannotDeleteEmployeeException | NUEVA | Excepción personalizada para manejar el intento de eliminación de empleados femeninos |

--- INSTRUCCIONES DE MODIFICACIÓN ---

1. Clase `EmployeeServiceImpl`: Modificar el método `deleteEmployeeById(Long id)` para agregar una validación que verifique el género del empleado antes de proceder con la eliminación. Si el género es "Femenino", se debe lanzar la excepción `CannotDeleteEmployeeException`.

2. Clase `CannotDeleteEmployeeException`: Crear esta nueva clase que extiende de `RuntimeException`. Esta excepción se lanzará cuando se intente eliminar un empleado de género femenino.

--- CÓDIGO A GENERAR ---

1. Clase `EmployeeServiceImpl`:

```java
package test.core.api.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import test.core.api.exception.CannotDeleteEmployeeException;
import test.core.api.model.Employee;
import test.core.api.repository.EmployeeRepository;
import test.core.api.service.EmployeeService;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public void deleteEmployeeById(Long id) {
        // Start of AI modification
        Employee employee = employeeRepository.findById(id).orElse(null);
        if (employee != null && "Femenino".equals(employee.getGender())) {
            throw new CannotDeleteEmployeeException("Cannot delete female employee with id: " + id);
        }
        // End of AI modification
        employeeRepository.deleteById(id);
    }

    // Other existing methods...
}
```

2. Clase `CannotDeleteEmployeeException`:

```java
package test.core.api.exception;

public class CannotDeleteEmployeeException extends RuntimeException {
    public CannotDeleteEmployeeException(String message) {
        super(message);
    }
}
```

3. Test Unitario para `EmployeeServiceImpl`:

```java
package test.core.api.service.impl;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import test.core.api.exception.CannotDeleteEmployeeException;
import test.core.api.model.Employee;
import test.core.api.repository.EmployeeRepository;

import java.util.Optional;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertThrows;

@ExtendWith(MockitoExtension.class)
public class EmployeeServiceImplTest {

    @Mock
    private EmployeeRepository employeeRepository;

    @InjectMocks
    private EmployeeServiceImpl employeeService;

    @Test
    public void deleteEmployeeById_FemaleEmployee_ThrowsException() {
        Employee employee = new Employee();
        employee.setGender("Femenino");
        when(employeeRepository.findById(1L)).thenReturn(Optional.of(employee));

        assertThrows(CannotDeleteEmployeeException.class, () -> {
            employeeService.deleteEmployeeById(1L);
        });
    }
}
```
