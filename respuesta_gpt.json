{
  "id": "chatcmpl-BgDUymqPneCVTdpxCNxPgPpahmblk",
  "object": "chat.completion",
  "created": 1749401364,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "--- CÓDIGO JAVA GENERADO ---\n\npackage com.example.demo.service.impl;\n\nimport com.example.demo.entity.Employee;\nimport com.example.demo.exception.CannotDeleteEmployeeException;\nimport com.example.demo.repository.EmployeeRepository;\nimport com.example.demo.service.EmployeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    @Override\n    public void deleteEmployeeById(Long id) {\n        Employee employee = employeeRepository.findById(id).orElse(null);\n\n        // Inicio de la modificación por la IA\n        if (employee != null && \"Femenino\".equalsIgnoreCase(employee.getGender())) {\n            throw new CannotDeleteEmployeeException(\"No se puede eliminar un empleado de género femenino.\");\n        }\n        // Fin de la modificación por la IA\n\n        employeeRepository.deleteById(id);\n    }\n\n    // Resto de los métodos existentes...\n}\n\n--- NUEVA CLASE JAVA GENERADA ---\n\npackage com.example.demo.exception;\n\npublic class CannotDeleteEmployeeException extends RuntimeException {\n    public CannotDeleteEmployeeException(String message) {\n        super(message);\n    }\n}\n\n--- TESTS UNITARIOS GENERADOS ---\n\npackage com.example.demo.service.impl;\n\nimport com.example.demo.entity.Employee;\nimport com.example.demo.exception.CannotDeleteEmployeeException;\nimport com.example.demo.repository.EmployeeRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class EmployeeServiceImplTest {\n\n    @InjectMocks\n    private EmployeeServiceImpl employeeService;\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testDeleteEmployeeById_FemaleEmployee() {\n        Employee femaleEmployee = new Employee();\n        femaleEmployee.setGender(\"Femenino\");\n\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(femaleEmployee));\n\n        assertThrows(CannotDeleteEmployeeException.class, () -> {\n            employeeService.deleteEmployeeById(1L);\n        });\n\n        verify(employeeRepository, never()).deleteById(anyLong());\n    }\n\n    @Test\n    public void testDeleteEmployeeById_MaleEmployee() {\n        Employee maleEmployee = new Employee();\n        maleEmployee.setGender(\"Masculino\");\n\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(maleEmployee));\n\n        employeeService.deleteEmployeeById(1L);\n\n        verify(employeeRepository, times(1)).deleteById(anyLong());\n    }\n\n    @Test\n    public void testDeleteEmployeeById_UnspecifiedGenderEmployee() {\n        Employee unspecifiedGenderEmployee = new Employee();\n\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(unspecifiedGenderEmployee));\n\n        employeeService.deleteEmployeeById(1L);\n\n        verify(employeeRepository, times(1)).deleteById(anyLong());\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 921,
    "completion_tokens": 615,
    "total_tokens": 1536,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
