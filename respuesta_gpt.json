{
  "id": "chatcmpl-BgCuhXCDscaKzEFlvcMWzU74eS60Y",
  "object": "chat.completion",
  "created": 1749399115,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "--- CÓDIGO JAVA GENERADO ---\n\n// Clase modificada: EmployeeServiceImpl\npackage com.example.EmployeeCoreApi.service.impl;\n\nimport com.example.EmployeeCoreApi.exception.CannotDeleteEmployeeException;\nimport com.example.EmployeeCoreApi.model.Employee;\nimport com.example.EmployeeCoreApi.repository.EmployeeRepository;\nimport com.example.EmployeeCoreApi.service.EmployeeService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    @Override\n    public List<Employee> getAllEmployees() {\n        return employeeRepository.findAll();\n    }\n\n    @Override\n    public Optional<Employee> getEmployeeById(Long id) {\n        return employeeRepository.findById(id);\n    }\n\n    @Override\n    public Employee createEmployee(Employee employee) {\n        return employeeRepository.save(employee);\n    }\n\n    @Override\n    public Employee updateEmployee(Employee employee) {\n        return employeeRepository.save(employee);\n    }\n\n    // Inicio de la modificación realizada por la IA\n    @Override\n    public void deleteEmployeeById(Long id) {\n        Optional<Employee> employee = employeeRepository.findById(id);\n        if (employee.isPresent() && \"Femenino\".equalsIgnoreCase(employee.get().getGender())) {\n            throw new CannotDeleteEmployeeException(\"No se puede eliminar un empleado de género femenino\");\n        }\n        employeeRepository.deleteById(id);\n    }\n    // Fin de la modificación realizada por la IA\n}\n\n// Nueva clase: CannotDeleteEmployeeException\npackage com.example.EmployeeCoreApi.exception;\n\npublic class CannotDeleteEmployeeException extends RuntimeException {\n    public CannotDeleteEmployeeException(String message) {\n        super(message);\n    }\n}\n\n--- CÓDIGO DE PRUEBAS JUNIT 5 GENERADO ---\n\n// Clase de prueba: EmployeeServiceImplTest\npackage com.example.EmployeeCoreApi.service.impl;\n\nimport com.example.EmployeeCoreApi.exception.CannotDeleteEmployeeException;\nimport com.example.EmployeeCoreApi.model.Employee;\nimport com.example.EmployeeCoreApi.repository.EmployeeRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class EmployeeServiceImplTest {\n\n    @InjectMocks\n    private EmployeeServiceImpl employeeService;\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testDeleteEmployeeById_WithFemaleEmployee_ThrowsException() {\n        Employee employee = new Employee();\n        employee.setGender(\"Femenino\");\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(employee));\n\n        assertThrows(CannotDeleteEmployeeException.class, () -> {\n            employeeService.deleteEmployeeById(1L);\n        });\n\n        verify(employeeRepository, never()).deleteById(anyLong());\n    }\n\n    @Test\n    public void testDeleteEmployeeById_WithNonFemaleEmployee_DeletesEmployee() {\n        Employee employee = new Employee();\n        employee.setGender(\"Masculino\");\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(employee));\n\n        employeeService.deleteEmployeeById(1L);\n\n        verify(employeeRepository).deleteById(anyLong());\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 907,
    "completion_tokens": 684,
    "total_tokens": 1591,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
