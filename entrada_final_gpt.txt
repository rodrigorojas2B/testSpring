--- HISTORIA DE USUARIO ---
nombre: Obtener empleados nacidos antes del año 2000
como: Administrador del sistema
quiero: Obtener una lista de empleados que hayan nacido antes del año 2000
para: Poder segmentar a los empleados por generaciones y aplicar políticas diferenciadas

--- DIAGNÓSTICO Y PLAN DE CLASES ---
--- ANÁLISIS DE CLASES EXISTENTES ---

| Clase Java | Package | Clasificación | Motivo |
|------------|---------|----------------|--------|
| Employee | test.core.api.model | REUTILIZABLE-AS-IS | Contiene atributo `birthDate` necesario para la nueva funcionalidad |
| EmployeeRepository | test.core.api.repository | REUTILIZABLE-AS-IS | Se puede extender para agregar un nuevo método de búsqueda |
| EmployeeCoreApiApplication | test.core.api | REUTILIZABLE-AS-IS | No requiere cambios |
| EmployeeController | test.core.api.controller | MODIFICABLE | Necesita un nuevo endpoint para obtener empleados nacidos antes del año 2000 |
| EmployeeService | test.core.api.service | MODIFICABLE | Necesita un nuevo método para obtener empleados nacidos antes del año 2000 |
| EmployeeServiceImpl | test.core.api.service.impl | MODIFICABLE | Necesita implementar el nuevo método de EmployeeService |

--- PLAN DE MODIFICACIÓN ---

1. EmployeeRepository: Agregar un nuevo método `List<Employee> findByBirthDateBefore(LocalDate date);` para buscar empleados nacidos antes de una fecha específica.

2. EmployeeService: Agregar un nuevo método `List<Employee> getEmployeesBornBeforeYear(int year);` para obtener empleados nacidos antes de un año específico.

3. EmployeeServiceImpl: Implementar el nuevo método `getEmployeesBornBeforeYear(int year)` utilizando el nuevo método en EmployeeRepository.

4. EmployeeController: Agregar un nuevo endpoint `@GetMapping("/born-before/{year}")` que utilice el nuevo método en EmployeeService para obtener empleados nacidos antes de un año específico.

5. Crear pruebas unitarias para los nuevos métodos en EmployeeServiceImpl y EmployeeController.

--- INSTRUCCIONES DE GENERACIÓN DE CÓDIGO ---
- Modifica únicamente las clases marcadas como MODIFICABLE.
- Crea nuevas clases solo si están indicadas como NUEVA.
- No cambies de paquete ni nombre de clase.
- Si modificas un método, inclúyelo completo con su lógica anterior más la nueva.
- No omitas lógica existente.
- Cada clase debe comenzar con `package ...`.
- Devuelve únicamente clases y tests JUnit 5 válidos.
- No incluyas explicaciones ni comentarios adicionales.
- Si una clase existente implementa una interfaz, o hereda de otra clase, debes mantener esa declaración `implements o extends ...`.
- No elimines implementaciones de interfaces ya declaradas.
- La firma de las clases y métodos debe mantenerse sin cambio a menos que la nueva funcionalidad lo requiera

