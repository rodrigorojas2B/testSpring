name: Generar funcionalidad desde historia de usuario

on:
  push:
    paths:
      - 'historias-usuario/**.yml'

jobs:
  generar_codigo:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          path: repositorio-base

      - name: Detectar historia de usuario modificada
        id: historia
        run: |
          cd repositorio-base
          git fetch --unshallow || true
          base_sha="${{ github.event.before }}"
          if ! git cat-file -e "$base_sha"^{commit} 2>/dev/null; then
            echo "‚ö†Ô∏è SHA base no v√°lido o sin historial, usando HEAD^"
            base_sha="HEAD^"
          fi
          echo "üîç Comparando con base: $base_sha"
          archivo=$(git diff --name-only "$base_sha" HEAD | grep '^historias-usuario/.*\.yml$' | head -n 1 || true)
          if [ -z "$archivo" ]; then
            echo "‚õî No se encontr√≥ ninguna historia de usuario modificada. Abortando."
            exit 1
          fi
          echo "ruta=$archivo" >> "$GITHUB_OUTPUT"

      - name: Leer contenido de historia de usuario
        run: |
          cd repositorio-base
          cat "${{ steps.historia.outputs.ruta }}" > entrada_gpt.txt

      - name: Instalar dependencias necesarias
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip openjdk-17-jdk maven

      - name: Indexar clases Java existentes y preparar prompt
        run: |
          echo "üìÅ Buscando clases Java dentro de repositorio-base/src/main/java..."
          find repositorio-base/src/main/java -type f -name "*.java" > clases_existentes.txt
          if [ ! -s clases_existentes.txt ]; then
            echo "‚ùå No se encontraron archivos .java. Abortando."
            exit 1
          fi

          echo -e "\n\n--- HISTORIA DE USUARIO ---" > entrada_gpt.txt
          cat repositorio-base/"${{ steps.historia.outputs.ruta }}" >> entrada_gpt.txt

          echo -e "\n\n--- CLASES DETECTADAS EN EL REPOSITORIO BASE ---" >> entrada_gpt.txt
          cat clases_existentes.txt >> entrada_gpt.txt

          cat <<'EOF' >> entrada_gpt.txt

          --- AN√ÅLISIS DE CLASES EXISTENTES ---

          A continuaci√≥n, entrega una tabla Markdown como esta:

          | Clase Java | Clasificaci√≥n | Motivo |
          |------------|----------------|--------|
          | Employee | REUTILIZABLE-AS-IS | Ya contiene birthDate |
          | EmployeeServiceImpl | MODIFICABLE | Debe agregar l√≥gica de validaci√≥n para g√©nero |
          | NuevaClaseX | NUEVA | Se requiere nueva l√≥gica para X |

          Solo incluye clases que ya existen en el proyecto o que deben crearse.

          --- INSTRUCCIONES DE MODIFICACI√ìN ---

          1. Modifica solo las clases indicadas como MODIFICABLE, sin eliminar c√≥digo anterior.
          2. Genera nuevas clases solo si est√°n marcadas como NUEVA.
          3. No repitas ni sobrescribas clases existentes innecesariamente.

          --- C√ìDIGO A GENERAR ---

          Devuelve √∫nicamente el c√≥digo Java correspondiente a las clases nuevas o modificadas. Cada clase debe comenzar con `package ...`.
          No incluyas comentarios explicativos ni texto adicional fuera del c√≥digo.

          Tambi√©n incluye tests unitarios para validar la funcionalidad agregada.
          EOF

      - name: Mostrar tabla de diagn√≥stico (si existe)
        run: |
          echo "üìã Tabla de clases seg√∫n GPT:"
          grep '|' repositorio-base/respuesta_gpt.json || echo "‚ö†Ô∏è GPT no gener√≥ tabla de diagn√≥stico"

      - name: Llamar a OpenAI para diagn√≥stico (solo an√°lisis y clasificaci√≥n)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base
          PROMPT=$(cat entrada_gpt.txt)

          jq -n --arg prompt "$PROMPT" '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": "Eres un analizador experto de c√≥digo Java. Devuelve solo el an√°lisis de clases existentes y el plan de modificaci√≥n. No devuelvas c√≥digo a√∫n." },
              { "role": "user", "content": $prompt }
            ],
            temperature: 0.2
          }' > payload_diagnostico.json
          

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_diagnostico.json > respuesta_gpt_diagnostico.json

          echo "üì® Respuesta de OpenAI:"
          cat respuesta_gpt_diagnostico.json


          jq -r '.choices[0].message.content // "‚ùå GPT no devolvi√≥ contenido v√°lido."' respuesta_gpt_diagnostico.json > diagnostico_gpt.txt

      - name: Mostrar an√°lisis GPT
        run: |
          echo "üìã Tabla de diagn√≥stico de clases:"
          cat repositorio-base/diagnostico_gpt.txt || echo "‚ö†Ô∏è No se pudo leer diagn√≥stico"

      - name: Llamar a OpenAI para generaci√≥n de c√≥digo
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd repositorio-base

          PROMPT=$(cat entrada_gpt.txt)

          jq -n --arg prompt "$PROMPT" '{
            model: "gpt-4",
            messages: [
              { "role": "system", "content": "Eres un generador de c√≥digo Java experto en Spring Boot. Solo devuelve clases y tests JUnit v√°lidos. Cada bloque debe comenzar con \"package\". No incluyas texto adicional." },
              { "role": "user", "content": $prompt }
            ],
            temperature: 0.3
          }' > payload_generacion.json

          echo "üßæ Payload generado para OpenAI:"
          cat payload_generacion.json

          curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload_generacion.json > respuesta_gpt.json

          echo "üì® Respuesta de OpenAI:"
          cat respuesta_gpt.json    


          jq -r '.choices[0].message.content // "‚ùå GPT no devolvi√≥ contenido v√°lido."' respuesta_gpt.json > clases_generadas.java

      - name: Separar clases generadas
        run: |
          cd repositorio-base
          mkdir -p src/main/java/ai/generated
          mkdir -p src/test/java/ai/generated
          csplit --quiet --prefix=clase_ --suffix-format=%02d.java clases_generadas.java "/^package /" {*}
          i=1
          for file in clase_*.java; do
            class_name=$(grep -oP 'public\s+(class|interface|enum)\s+\K\w+' "$file" | head -n 1)
            if grep -q '@Test' "$file"; then
              dest="src/test/java/ai/generated"
            else
              dest="src/main/java/ai/generated"
            fi
            mv "$file" "$dest/${class_name:-ClaseGenerada_$i}.java"
            i=$((i+1))
          done

      - name: Ejecutar pruebas unitarias (incluye regresi√≥n)
        run: |
          cd repositorio-base
          mvn test || echo "‚ö†Ô∏è Algunos tests fallaron, revisar logs"

      - name: Commit y push de la nueva funcionalidad
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          cd repositorio-base
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b feature/autogenerado-${{ github.run_id }}
          git add .
          if git diff --cached --quiet; then
            echo "‚õî No hay cambios para commitear, se omite push"
            exit 0
          fi
          git commit -m "ü§ñ Funcionalidad generada desde historia de usuario"
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git
          git push origin HEAD
