name: SonarCloud + GPT + Comparaci√≥n + Iteraciones

on:
  push:
    branches:
      - main

jobs:
  sonar-gpt-review:
    name: An√°lisis, Mejora y Comparaci√≥n
    runs-on: ubuntu-latest
    env:
      MAX_ITERACIONES_CI: 5

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache de Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Compilar y testear el proyecto
        run: mvn clean verify

      - name: An√°lisis original con SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.projectName="testSpring Original" \
            -Dsonar.sources=src/main/java \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

      - name: Guardar reporte original
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s "https://sonarcloud.io/api/issues/search?componentKeys=rodrigorojasg_testSpring&resolved=false" \
            -H "Authorization: Bearer $SONAR_TOKEN" > reporte_original.json

      - name: Detectar archivos con errores
        run: |
          jq -r '.issues[].component' reporte_original.json | sort -u > archivos_afectados.txt

      - name: Llamar a OpenAI por cada archivo afectado
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          iter=1
          echo "ITERACION_ACTUAL=$iter" >> $GITHUB_ENV
          mkdir -p reportes_ci

          while read COMPONENT; do
            FILE=$(echo "$COMPONENT" | sed 's/^rodrigorojasg_testSpring://')
            if [ -f "$FILE" ]; then
              CODE=$(base64 "$FILE" | tr -d '\n')

              # Obtener problemas reales reportados por SonarCloud
              REPORT=$(curl -s "https://sonarcloud.io/api/issues/search?componentKeys=$COMPONENT&resolved=false" \
                -H "Authorization: Bearer $SONAR_TOKEN" |
                jq -r '.issues[] | "\(.severity): \(.message) (line \(.line))"' | tr '\n' ' ')

              # Si no hay errores reportados, saltar archivo
              if [ -z "$REPORT" ]; then
                echo "‚ö†Ô∏è No se encontraron problemas espec√≠ficos en $FILE, se omite"
                continue
              fi

              RESPONSE_FILE="reportes_ci/gpt_response_$(basename $FILE .java).json"

              curl -s https://api.openai.com/v1/chat/completions \
                -H "Authorization: Bearer $OPENAI_API_KEY" \
                -H "Content-Type: application/json" \
              -d '{
                \"model\": \"gpt-4\",
                \"messages\": [
                  {
                    \"role\": \"system\",
                    \"content\": \"Eres un asistente experto en Java y Spring Boot. Vas a recibir una clase en Java codificada en base64 y una lista de problemas de calidad detectados por SonarCloud. Tu tarea es corregir solo esos problemas, manteniendo la l√≥gica y estructura original.\"
                  },
                  {
                    \"role\": \"user\",
                    \"content\": \"Este es el c√≥digo fuente en base64: ${CODE}. A continuaci√≥n, los problemas reportados por SonarCloud: ${REPORT}. Corrige exclusivamente los problemas indicados por SonarCloud sin modificar la l√≥gica ni el dise√±o original del c√≥digo. ‚ö†Ô∏è IMPORTANTE: responde solamente con el c√≥digo fuente Java mejorado, completamente compilable y sin ning√∫n comentario, encabezado, explicaci√≥n, texto adicional o cambios estructurales innecesarios (como reemplazar entidades por DTOs si no est√° indicado).\"
                  }
                ],
                \"temperature\": 0.3
              }' > "$RESPONSE_FILE"

              # Extraer contenido corregido
              if jq -e '.choices[0].message.content' "$RESPONSE_FILE" > /dev/null 2>&1; then
                jq -r '.choices[0].message.content' "$RESPONSE_FILE" > "${FILE%.java}.mejorado.java"
                echo "‚úÖ Generado: ${FILE%.java}.mejorado.java"
              else
                echo "‚ùå Error en respuesta para $FILE"
                cat "$RESPONSE_FILE"
              fi
            else
              echo "‚ö†Ô∏è Archivo no encontrado: $FILE"
            fi
          done < archivos_afectados.txt


      - name: Preparar carpeta src-analizado
        run: |
          mkdir -p src-analizado/main/java
          for f in $(find . -name "*.mejorado.java"); do
            destino="src-analizado/$(echo $f | cut -d/ -f2- | sed 's/\.mejorado//')"
            mkdir -p $(dirname "$destino")
            cp "$f" "$destino"
          done

      - name: An√°lisis con SonarCloud del c√≥digo mejorado
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring_gpt \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.projectName="testSpring GPT Mejorado" \
            -Dsonar.sources=src-analizado/main/java \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

      - name: Guardar reporte mejorado
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s "https://sonarcloud.io/api/issues/search?componentKeys=rodrigorojasg_testSpring_gpt&resolved=false" \
            -H "Authorization: Bearer $SONAR_TOKEN" > reporte_mejorado.json

      - name: Comparar resultados de an√°lisis
        id: comparar_errores
        run: |
          echo "üìä Comparaci√≥n de severidades:"

          echo "ANTES:"
          cat reporte_original.json | jq '[.issues[]? | .severity // empty] |
            map(
              if . == "BLOCKER" then 10
              elif . == "CRITICAL" then 7
              elif . == "MAJOR" then 5
              elif . == "MINOR" then 3
              elif . == "INFO" then 1
              else 0 end
            ) | add // 0' > puntaje_antes.txt

          cat puntaje_antes.txt
          puntaje_antes=$(cat puntaje_antes.txt)
          echo "PUNTAJE_ANTES=$puntaje_antes" >> $GITHUB_ENV

          echo "DESPU√âS:"
          cat reporte_mejorado.json | jq '[.issues[]? | .severity // empty] |
            map(
              if . == "BLOCKER" then 10
              elif . == "CRITICAL" then 7
              elif . == "MAJOR" then 5
              elif . == "MINOR" then 3
              elif . == "INFO" then 1
              else 0 end
            ) | add // 0' > puntaje_despues.txt

          cat puntaje_despues.txt
          puntaje_despues=$(cat puntaje_despues.txt)
          echo "PUNTAJE_DESPUES=$puntaje_despues" >> $GITHUB_ENV

          if [ "$puntaje_despues" -lt "$puntaje_antes" ]; then
            echo "MEJORA_SIGNIFICATIVA=true" >> $GITHUB_ENV
            echo "‚úÖ Mejora significativa detectada"
          else
            echo "MEJORA_SIGNIFICATIVA=false" >> $GITHUB_ENV
            echo "‚õî No se detect√≥ mejora significativa en severidad"
          fi


      - name: Commit autom√°tico si hay mejora significativa
        if: env.MEJORA_SIGNIFICATIVA == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git

          # Hacer pull con rebase para evitar errores por cambios remotos
          git fetch origin
          git pull --rebase origin main

          iter_dir="ci-reportes/iteracion-${ITERACION_ACTUAL}"
          mkdir -p "$iter_dir"
          cp reporte_original.json "$iter_dir/"
          cp reporte_mejorado.json "$iter_dir/"
          cp reportes_ci/* "$iter_dir/" || true

          git add ci-reportes/
          git add src/**/*.mejorado.java || true
          git commit -m "ü§ñ Iteraci√≥n ${ITERACION_ACTUAL}: mejora aplicada con reducci√≥n de severidades"
          git push origin main
