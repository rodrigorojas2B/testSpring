name: SonarCloud + GPT + Comparación + Merge Condicional

on:
  push:
    branches:
      - main

env:
  MAX_ITERACIONES_CI: 3

jobs:
  sonar-gpt-review:
    name: CI + GPT + SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Leer número de iteración actual
        id: leer_iteracion
        run: |
          iter=1
          if [ -f .iteracion_ci ]; then
            iter=$(cat .iteracion_ci)
          fi
          echo "ITERACION_ACTUAL=$iter" >> $GITHUB_ENV

      - name: Verificar si se excedió el máximo de iteraciones
        if: env.ITERACION_ACTUAL > env.MAX_ITERACIONES_CI
        run: |
          echo "❌ Límite de $MAX_ITERACIONES_CI iteraciones alcanzado. Abortando."
          exit 1

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build y test
        run: mvn clean verify

      - name: Análisis SonarCloud original
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

      - name: Descargar informe de errores original
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
          "https://sonarcloud.io/api/issues/search?componentKeys=rodrigorojasg_testSpring&resolved=false" \
          -o reporte_original.json

      - name: Llamada a OpenAI y generación de código mejorado
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          while read f; do
            [ -f "$f" ] || continue
            echo "Mejorando $f..."
            content=$(base64 "$f" | tr -d '\n')
            curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4",
                "messages": [
                  {"role": "system", "content": "Corrige este código Java Spring Boot sin comentarios, solo el código corregido"},
                  {"role": "user", "content": "Código en base64: '"$content"'\n\nCorrígelo."}
                ],
                "temperature": 0.3
              }' | jq -r '.choices[0].message.content' > "${f%.java}.mejorado.java"
          done < <(find src/main/java -name "*.java")

      - name: Crear copia del proyecto mejorado
        run: |
          mkdir -p src-analizado
          rsync -a src/ src-analizado/
          for f in $(find src-analizado -name "*.mejorado.java"); do
            mv "$f" "${f%.mejorado.java}.java"
          done

      - name: Análisis SonarCloud mejorado
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring_gpt \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=src-analizado/main/java \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.login=$SONAR_TOKEN

      - name: Descargar informe de errores mejorado
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }}: \
          "https://sonarcloud.io/api/issues/search?componentKeys=rodrigorojasg_testSpring_gpt&resolved=false" \
          -o reporte_mejorado.json

      - name: Comparar resultados y generar reporte
        id: comparar
        run: |
          errores_antes=$(jq '.issues | length' reporte_original.json)
          errores_despues=$(jq '.issues | length' reporte_mejorado.json)

          mkdir -p reportes_ci
          echo "Iteración: $ITERACION_ACTUAL" > reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt
          echo "Errores antes: $errores_antes" >> reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt
          echo "Errores después: $errores_despues" >> reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt

          for f in $(find src/main/java -name "*.java"); do
            mejorado="${f%.java}.mejorado.java"
            [ -f "$mejorado" ] && diff "$f" "$mejorado" > "reportes_ci/diff_$(basename $f).txt" || true
          done

          echo "errores_antes=$errores_antes" >> $GITHUB_OUTPUT
          echo "errores_despues=$errores_despues" >> $GITHUB_OUTPUT

      - name: Subir reportes como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: reporte-iteracion-${{ env.ITERACION_ACTUAL }}
          path: reportes_ci

      - name: Hacer commit si la calidad mejora
        if: ${{ steps.comparar.outputs.errores_despues < steps.comparar.outputs.errores_antes }}
        run: |
          for f in $(find src/main/java -name "*.mejorado.java"); do
            mv "$f" "${f%.mejorado.java}.java"
          done

          iteracion=$((ITERACION_ACTUAL + 1))
          echo "$iteracion" > .iteracion_ci

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "AUTO-MERGE-GPT: mejora calidad en iteración $iteracion"
          git push origin main

      - name: Finalizar si no mejora calidad
        if: ${{ steps.comparar.outputs.errores_despues >= steps.comparar.outputs.errores_antes }}
        run: echo "No se hizo merge la calidad no mejoró."
