name: SonarCloud + GPT para Spring Boot con Iteraciones

on:
  push:
    branches:
      - main

env:
  MAX_ITERACIONES_CI: 5

jobs:
  sonar-gpt-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Caché de Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Determinar iteración actual
        id: iteracion
        run: |
          iter=1
          if [ -f .iteracion_ci ]; then
            iter=$(cat .iteracion_ci)
            iter=$((iter + 1))
          fi
          echo "$iter" > .iteracion_ci
          echo "ITERACION_ACTUAL=$iter" >> $GITHUB_ENV

      - name: Compilar y testear el proyecto
        run: mvn clean verify

      - name: Análisis original con SonarCloud
        id: sonar_original
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN > salida_sonar.txt

          errores_antes=$(grep -o 'severity\":\"[A-Z]+\"' salida_sonar.txt | wc -l)
          echo "ERRORES_ANTES=$errores_antes" >> $GITHUB_ENV

      - name: Llamar a OpenAI para sugerencias
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p correcciones
          for f in $(find src/main/java -name "*.java"); do
            CODE=$(base64 "$f" | tr -d '\n')
            curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "model": "gpt-4",
                "messages": [
                  {"role": "system", "content": "Eres un asistente experto en Java Spring Boot que mejora código según observaciones de calidad."},
                  {"role": "user", "content": "Este es el código base64: '"$CODE"'\n\nCorrige problemas sin comentarios, solo devuelve el código completo corregido."}
                ],
                "temperature": 0.3
              }' | jq -r '.choices[0].message.content' > "${f%.java}.mejorado.java"
          done

      - name: Análisis de código mejorado
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cp -r src src-analizado
          for f in $(find src-analizado -name "*.mejorado.java"); do
            mv "$f" "${f%.mejorado.java}.java"
          done
          mvn sonar:sonar \
            -Dsonar.projectKey=rodrigorojasg_testSpring_gpt \
            -Dsonar.organization=rodrigorojasg \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=src-analizado \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.login=$SONAR_TOKEN > salida_sonar_gpt.txt

          errores_despues=$(grep -o 'severity\":\"[A-Z]+\"' salida_sonar_gpt.txt | wc -l)
          echo "ERRORES_DESPUES=$errores_despues" >> $GITHUB_ENV

      - name: Crear reportes
        run: |
          mkdir -p reportes_ci
          echo "Iteración: $ITERACION_ACTUAL" > reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt
          echo "Errores ANTES: $ERRORES_ANTES" >> reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt
          echo "Errores DESPUÉS: $ERRORES_DESPUES" >> reportes_ci/reporte_iteracion_${ITERACION_ACTUAL}.txt
          for f in $(find src/main/java -name "*.java"); do
            mejorado="${f%.java}.mejorado.java"
            if [ -f "$mejorado" ]; then
              diff "$f" "$mejorado" > "reportes_ci/diff_$(basename "$f" .java).txt" || true
            fi
          done

      - name: Subir reportes y mejoras al repositorio si mejora la calidad
        if: env.ERRORES_DESPUES < env.ERRORES_ANTES
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          iter_dir="ci-reportes/iteracion-${ITERACION_ACTUAL}"
          mkdir -p "$iter_dir"
          cp reportes_ci/* "$iter_dir/" || true

          for f in $(find src/main/java -name "*.mejorado.java"); do
            mv "$f" "${f%.mejorado.java}.java"
          done

          git add src/main/java
          git add ci-reportes/
          git add .iteracion_ci || true
          git commit -m "🤖 Iteración ${ITERACION_ACTUAL}: mejoras GPT + reportes"
          git push origin main
